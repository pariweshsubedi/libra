import 0x0.LibraCoin;
import 0x0.LibraAccount;
import 0x0.MultiWallet2Of3;
import 0x0.Sym;

main() {
    let o1: address;
    let o2: address;
    let o3: address;
    let dst: address;
    let sender: address;
    let o2deposit: u64;
    let o2money: LibraCoin.T;
    let o2balance: u64;
    let o2balance_sym: u64;
    let o3balance: u64;
    let o3balance_sym: u64;
    let dst_balance: u64;
    let dst_balance_sym: u64;

    o1 = Sym.fresh_address("owner1", 0xb5dda24ae4a5c03c937f8f0b2e86aa61b2b5f7dae78913cb4dfd8d3ba956fc2d);
    o2 = Sym.fresh_address("owner2", 0xe9c274590ae2dc50614b35c0120b346760dcf424449a23573260197314a6a06e);
    o3 = Sym.fresh_address("owner3", 0x1e194c5b2eb95d71e1a75f7c0e1f80c6250d32e5f7d4d5b1da6560db50605bfa);
    dst = Sym.fresh_address("dst", 0x3102f81d9334027da8bd34af4f49435cd62c830d6deb0949ddc5e82df84b83f4);
    sender = get_txn_sender();
    assert(copy(sender) == copy(o2), 99);

    // have o2 deposit some monies as well into multiwallet stored at o1
    // extract some money from o1's balance
    o2deposit = Sym.fresh_u64("o2deposit", 3);
    o2money = LibraAccount.withdraw_from_sender(copy(o2deposit));

    o2balance = LibraAccount.balance(copy(o2));
    o2balance_sym = Sym.fresh_u64("o2_init_balance", 8855);
    assert(copy(o2balance_sym) == copy(o2balance), 99);

    o3balance = LibraAccount.balance(copy(o3));
    o3balance_sym = Sym.fresh_u64("o3_init_balance", 17);
    assert(copy(o3balance_sym) == copy(o3balance), 99);

    dst_balance = LibraAccount.balance(copy(dst));
    dst_balance_sym = Sym.fresh_u64("dst_init_balance", 1142);
    assert(copy(dst_balance_sym) == copy(dst_balance), 99);

    // put some money into multiwallet
    MultiWallet2Of3.deposit(copy(o1), move(o2money));

    return;
}

